{"version":3,"file":"static/js/103.3f69c87b.chunk.js","mappings":"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","sources":["components/ContactDetails/ContactDetails.styled.ts","components/ContactInfo/ContactInfo.styled.ts","components/ContactInfo/ContactInfo.tsx","components/EditForm/EditForm.styled.ts","components/EditForm/EditForm.tsx","components/ContactDetails/ContactDetails.tsx","components/ContactModalForm/ContactModalForm.styled.ts","components/ContactModalForm/ContactModalForm.tsx","components/DefaultMessage/DefaultMessage.styled.ts","components/DefaultMessage/DefaultMessage.tsx","hooks/useDeleteContact.ts","hooks/useTargetContact.ts"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  flex-grow: 1;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.primaryGap}px;\n  justify-content: flex-end;\n  margin-bottom: ${({ theme }) => theme.spacing(28)};\n`;\n","import styled from '@emotion/styled';\n\nexport const Image = styled.img`\n  width: 112px;\n  margin: 0 auto ${({ theme }) => theme.spacing(2)};\n`;\n\nexport const ContactTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(2)};\n`;\n\nexport const ContactName = styled.p`\n  color: ${({ theme }) => theme.colors.primaryFontColor};\n  font-family: Jua;\n  font-size: ${({ theme }) => theme.fontSize.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.fontWeight.otherFontWeight};\n  text-align: center;\n`;\n\nexport const ContactDesc = styled.p`\n  color: ${({ theme }) => theme.colors.secondaryFontColor};\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.fontSize.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.fontWeight.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Navigation = styled.nav`\n  background-color: ${({ theme }) => theme.colors.lightgreyColor};\n  padding: ${({ theme }) => theme.spacing()};\n  border-radius: ${({ theme }) => theme.borderRadius.navBarBorderRadius}px;\n  margin-top: ${({ theme }) => theme.spacing(20)};\n  margin-bottom: ${({ theme }) => theme.spacing(10)};\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ListItem = styled.li`\n  & a {\n    display: block;\n    padding: ${({ theme }) => `${theme.spacing()} ${theme.spacing(5)}`};\n    border-radius: ${({ theme }) => theme.borderRadius.secondaryBorderRadius}px;\n    color: ${({ theme }) => theme.colors.otherFontColor};\n    font-family: Jua;\n    font-size: ${({ theme }) => theme.fontSize.primaryFontSize}px;\n    font-weight: ${({ theme }) => theme.fontWeight.otherFontWeight};\n    text-decoration: none;\n    transition: background-color\n      ${({ theme }) => theme.transitionDurationAndFunc};\n    &.active,\n    &:hover,\n    &:focus {\n      background-color: ${({ theme }) => theme.colors.otherLinkColor};\n    }\n  }\n`;\n","import { Suspense } from 'react';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport { useTargetContact } from 'hooks';\nimport { getContactInfo } from 'utils';\nimport Loader from 'components/Loader';\nimport {\n  ContactDesc,\n  ContactName,\n  ContactTitle,\n  Image,\n  ListItem,\n  List,\n  Navigation,\n} from './ContactInfo.styled';\nimport { PagesPath } from 'constants/pagesPath';\n\nconst ContactInfo = () => {\n  const targetContact = useTargetContact();\n  const { name, role, userAvatar } = getContactInfo(targetContact);\n\n  return (\n    <>\n      <Image src={userAvatar} alt={`${name} photo`} />\n      <ContactTitle>\n        <ContactName>{name}</ContactName>\n        <ContactDesc>{role}</ContactDesc>\n      </ContactTitle>\n      <Navigation>\n        <List>\n          <ListItem>\n            <NavLink to={PagesPath.contactPath}>Contact</NavLink>\n          </ListItem>\n          <ListItem>\n            <NavLink to={PagesPath.aboutPath}>About</NavLink>\n          </ListItem>\n        </List>\n      </Navigation>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default ContactInfo;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.p`\n  color: ${({ theme }) => theme.colors.primaryFontColor};\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.fontSize.otherFontSize}px;\n  font-weight: ${({ theme }) => theme.fontWeight.secondaryFontWeight};\n  text-align: center;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n\nexport const Buttons = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.spacing(10)};\n  align-self: center;\n`;\n","import { HiPhone } from 'react-icons/hi';\nimport { FaUser } from 'react-icons/fa';\nimport { useParams } from 'react-router-dom';\nimport { GoX } from 'react-icons/go';\nimport { GiCheckMark } from 'react-icons/gi';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Buttons, Form, Title } from './EditForm.styled';\nimport IconButton from 'components/IconButton';\nimport Input from 'components/Input';\nimport { getContactInfo, toasts } from 'utils';\nimport { useTargetContact } from 'hooks';\nimport { updateContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { useAppDispatch, useAppSelector } from 'hooks/redux';\nimport { IContact } from 'types/types';\nimport { useEffect } from 'react';\nimport { BtnType } from 'constants/btnType';\nimport { IProps } from './EditForm.types';\nimport { PagesPath } from 'constants/pagesPath';\nimport { IconBtnType } from 'constants/iconBtnType';\n\nconst EditForm = ({ setEditContact }: IProps) => {\n  const isLoading = useAppSelector(selectIsLoading);\n  const dispatch = useAppDispatch();\n  const id = useParams()[PagesPath.dynamicParam];\n  const targetContact = useTargetContact();\n  const { name, number } = getContactInfo(targetContact);\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<IContact>();\n\n  useEffect(() => {\n    errors.name && toasts.errorToast('Name is required');\n    errors.number && toasts.errorToast('Phone is required');\n  }, [errors]);\n\n  const handleFormSubmit: SubmitHandler<IContact> = (data) => {\n    if (id) {\n      dispatch(updateContact({ data, id }))\n        .unwrap()\n        .then(() => {\n          toasts.successToast('Contact updated successfully');\n        })\n        .catch(() => {\n          toasts.errorToast('Contact update failed');\n        });\n    }\n  };\n\n  return (\n    <>\n      <Title>Contact editing</Title>\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Input\n          defaultValue={name}\n          settings={{ ...register('name', { required: true }) }}\n          type=\"text\"\n          placeholder=\"Name\"\n          inputWrap\n          fieldIcon={<FaUser />}\n          fieldIconSize={18}\n        />\n        <Input\n          defaultValue={number}\n          settings={{ ...register('number', { required: true }) }}\n          type=\"tel\"\n          placeholder=\"Phone\"\n          inputWrap\n          fieldIcon={<HiPhone />}\n          fieldIconSize={18}\n        />\n        <Buttons>\n          <IconButton\n            disabled={isLoading}\n            btnType={IconBtnType.accept}\n            width={44}\n            height={35}\n            type={BtnType.submit}\n          >\n            <GiCheckMark />\n          </IconButton>\n          <IconButton\n            btnType={IconBtnType.cancel}\n            width={44}\n            height={35}\n            onBtnClick={setEditContact}\n          >\n            <GoX />\n          </IconButton>\n        </Buttons>\n      </Form>\n    </>\n  );\n};\n\nexport default EditForm;\n","import { useParams } from 'react-router-dom';\nimport { MouseEvent, useState } from 'react';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport { CiEdit } from 'react-icons/ci';\nimport { Container, ButtonContainer } from './ContactDetails.styled';\nimport ContactInfo from 'components/ContactInfo';\nimport EditForm from 'components/EditForm';\nimport ContactModalForm from 'components/ContactModalForm';\nimport IconButton from 'components/IconButton';\nimport { makeBlur } from 'utils';\nimport { useDeleteContact, useTargetContact } from 'hooks';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { useAppSelector } from 'hooks/redux';\nimport { IconBtnType } from 'constants/iconBtnType';\nimport { PagesPath } from 'constants/pagesPath';\nimport DefaultMessage from 'components/DefaultMessage';\n\nconst ContactDetails = () => {\n  const [editContact, setEditContact] = useState<boolean>(false);\n  const isLoading = useAppSelector(selectIsLoading);\n  const id = useParams()[PagesPath.dynamicParam];\n  const deleteContact = useDeleteContact();\n  const { id: contactId } = useTargetContact();\n\n  const setEditState = () => {\n    setEditContact((editContact) => !editContact);\n  };\n\n  const handleEditBtnClick = (e: MouseEvent<HTMLButtonElement>) => {\n    setEditState();\n    makeBlur(e.currentTarget);\n  };\n\n  const handleDelBtnClick = () => {\n    if (id) {\n      deleteContact(id);\n    }\n  };\n\n  return contactId ? (\n    <>\n      <Container>\n        <ButtonContainer>\n          {!editContact && (\n            <IconButton\n              disabled={isLoading}\n              btnType={IconBtnType.delete}\n              width={44}\n              height={35}\n              onBtnClick={handleDelBtnClick}\n            >\n              <AiOutlineDelete />\n            </IconButton>\n          )}\n          <IconButton\n            btnType={IconBtnType.edit}\n            width={44}\n            height={35}\n            onBtnClick={handleEditBtnClick}\n          >\n            <CiEdit />\n          </IconButton>\n        </ButtonContainer>\n        {editContact ? (\n          <ContactModalForm>\n            <EditForm setEditContact={setEditState} />\n          </ContactModalForm>\n        ) : (\n          <ContactInfo />\n        )}\n      </Container>\n    </>\n  ) : (\n    <DefaultMessage message=\"Contact is absent\" />\n  );\n};\n\nexport default ContactDetails;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n","import { Container } from './ContactModalForm.styled';\nimport { IProps } from './ContactModalForm.types';\n\nconst ContactModalForm = ({ children }: IProps) => (\n  <Container>{children}</Container>\n);\n\nexport default ContactModalForm;\n","import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  color: ${({ theme }) => theme.colors.primaryFontColor};\n  font-family: Jua;\n  font-size: ${({ theme }) => theme.fontSize.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.fontWeight.otherFontWeight};\n`;\n","import { Message } from './DefaultMessage.styled';\nimport { IProps } from './DefaultMessage.types';\n\nconst EmptyListMessage = ({ message }: IProps) => <Message>{message}</Message>;\n\nexport default EmptyListMessage;\n","import { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { toasts } from 'utils';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useAppDispatch } from 'hooks/redux';\nimport { PagesPath } from 'constants/pagesPath';\n\nconst useDeleteContact = () => {\n  const [contactId, setContactId] = useState<string | null>(null);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const path = `/${PagesPath.contactsPath + search}`;\n\n  useEffect(() => {\n    if (contactId) {\n      dispatch(deleteContact(contactId))\n        .unwrap()\n        .then(() => {\n          navigate(path);\n          toasts.successToast('Contact successfully removed');\n        })\n        .catch(() => {\n          toasts.errorToast('Deleting a contact failed');\n        });\n    }\n  }, [contactId, dispatch, navigate, path]);\n\n  return setContactId;\n};\n\nexport default useDeleteContact;\n","import { PagesPath } from 'constants/pagesPath';\nimport { useParams } from 'react-router-dom';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useAppSelector } from './redux';\nimport { IContact } from 'types/types';\n\nconst useTargetContact = (): IContact => {\n  const id = useParams()[PagesPath.dynamicParam];\n  const contacts: IContact[] = useAppSelector(selectContacts);\n  const targetContact = contacts.find(({ id: contactId }) => contactId === id);\n  const defaultContact = {\n    id: '',\n    name: '',\n    number: '',\n  };\n\n  return targetContact ? targetContact : defaultContact;\n};\n\nexport default useTargetContact;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","ButtonContainer","_templateObject2","_ref","theme","primaryGap","_ref2","spacing","Image","ContactTitle","ContactName","_templateObject3","_ref3","colors","primaryFontColor","_ref4","fontSize","secondaryFontSize","_ref5","fontWeight","otherFontWeight","ContactDesc","_templateObject4","_ref6","secondaryFontColor","_ref7","primaryFontSize","_ref8","primaryFontWeight","Navigation","_templateObject5","_ref9","lightgreyColor","_ref10","_ref11","borderRadius","navBarBorderRadius","_ref12","_ref13","List","_templateObject6","ListItem","_templateObject7","_ref14","concat","_ref15","secondaryBorderRadius","_ref16","otherFontColor","_ref17","_ref18","_ref19","transitionDurationAndFunc","_ref20","otherLinkColor","targetContact","useTargetContact","_getContactInfo","getContactInfo","name","role","userAvatar","_jsxs","_Fragment","children","_jsx","src","alt","NavLink","to","PagesPath","Suspense","fallback","Loader","Outlet","Title","otherFontSize","secondaryFontWeight","Form","Buttons","setEditContact","isLoading","useAppSelector","selectIsLoading","dispatch","useAppDispatch","id","useParams","number","_useForm","useForm","register","errors","formState","handleSubmit","useEffect","toasts","onSubmit","data","updateContact","unwrap","then","catch","Input","defaultValue","settings","_objectSpread","required","type","placeholder","inputWrap","fieldIcon","FaUser","fieldIconSize","HiPhone","IconButton","disabled","btnType","IconBtnType","width","height","BtnType","GiCheckMark","onBtnClick","GoX","_useState","useState","_useState2","_slicedToArray","editContact","deleteContact","useDeleteContact","contactId","setEditState","AiOutlineDelete","e","makeBlur","currentTarget","CiEdit","ContactModalForm","EditForm","ContactInfo","DefaultMessage","message","Message","setContactId","navigate","useNavigate","search","useLocation","path","selectContacts","find"],"sourceRoot":""}