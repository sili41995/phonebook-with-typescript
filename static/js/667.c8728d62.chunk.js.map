{"version":3,"file":"static/js/667.c8728d62.chunk.js","mappings":"6OAoBA,EAdqB,SAAHA,GAA6B,IAAvBC,EAAOD,EAAPC,QAChBC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAWC,EAAAA,EAAAA,MACXC,GAAkBP,IAAeG,EACjCK,EAAI,IAAAC,OAAOC,EAAAA,EAAAA,WAEjB,OAAOH,GACLI,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIL,EAAMM,MAAO,CAAEC,KAAMV,KAEnCN,CAEJ,C","sources":["components/PrivateRoute/PrivateRoute.tsx"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn, selectIsRefreshing } from 'redux/auth/selectors';\nimport { PagesPath } from 'constants/pagesPath';\nimport { IProps } from './PrivateRoute.types';\n\nconst PrivateRoute = ({ element }: IProps) => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const location = useLocation();\n  const shouldRedirect = !isLoggedIn && !isRefreshing;\n  const path = `/${PagesPath.loginPath}`;\n\n  return shouldRedirect ? (\n    <Navigate to={path} state={{ from: location }} />\n  ) : (\n    element\n  );\n};\n\nexport default PrivateRoute;\n"],"names":["_ref","element","isLoggedIn","useSelector","selectIsLoggedIn","isRefreshing","selectIsRefreshing","location","useLocation","shouldRedirect","path","concat","PagesPath","_jsx","Navigate","to","state","from"],"sourceRoot":""}